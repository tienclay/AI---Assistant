// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.26.1
// source: ai.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "ai";

export interface KnowledgeProperty {
  prompt: string;
  description: string;
  instructions: string[];
  extraInstructions: string[];
  expectedOutput: string;
}

export interface LoadKnowledgeRequest {
  assistant: string;
  agentCollectionName: string;
  websiteUrls: string[];
  pdfUrls: string[];
  property: KnowledgeProperty | undefined;
}

export interface LoadKnowledgeResponse {
  result: string;
}

export interface CreateAssistantRunRequest {
  userId: string;
  agentCollectionName: string;
  assistant: string;
  property: KnowledgeProperty | undefined;
}

export interface CreateAssistantRunResponse {
  runId: string;
  userId: string;
  chatHistory: string[];
}

export interface AssistantChatRequest {
  message: string;
  stream: boolean;
  runId: string;
  userId: string;
  agentCollectionName: string;
  assistant: string;
  property: KnowledgeProperty | undefined;
}

export interface AssistantChatResponse {
  message: string;
}

export interface GetHistoryRequest {
  runId: string;
  userId: string;
  assistant: string;
  agentCollectionName: string;
  property: KnowledgeProperty | undefined;
}

export interface GetHistoryResponse {
  history: string;
}

export const AI_PACKAGE_NAME = "ai";

export interface AiServiceClient {
  loadKnowledge(request: LoadKnowledgeRequest): Observable<LoadKnowledgeResponse>;

  createAgentRun(request: CreateAssistantRunRequest): Observable<CreateAssistantRunResponse>;

  sendMessage(request: AssistantChatRequest): Observable<AssistantChatResponse>;

  sendHistory(request: GetHistoryRequest): Observable<GetHistoryResponse>;
}

export interface AiServiceController {
  loadKnowledge(
    request: LoadKnowledgeRequest,
  ): Promise<LoadKnowledgeResponse> | Observable<LoadKnowledgeResponse> | LoadKnowledgeResponse;

  createAgentRun(
    request: CreateAssistantRunRequest,
  ): Promise<CreateAssistantRunResponse> | Observable<CreateAssistantRunResponse> | CreateAssistantRunResponse;

  sendMessage(
    request: AssistantChatRequest,
  ): Promise<AssistantChatResponse> | Observable<AssistantChatResponse> | AssistantChatResponse;

  sendHistory(
    request: GetHistoryRequest,
  ): Promise<GetHistoryResponse> | Observable<GetHistoryResponse> | GetHistoryResponse;
}

export function AiServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["loadKnowledge", "createAgentRun", "sendMessage", "sendHistory"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AiService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AiService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AI_SERVICE_NAME = "AiService";
